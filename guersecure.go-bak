package main

import (
	_ "bufio"
	"bytes"
	_ "bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/crypto/ecies"

	"github.com/gin-gonic/gin"
	shell "github.com/ipfs/go-ipfs-api"
)

type smtpServer struct {
	host string
	port string
}

//Our companion file is uploaded along with our encrypted file to allow us to confirm the file validity and easily encrypt/decrypt it.
type Companion struct {
	PubKey    []byte `json:"pubkey"`
	Signature []byte `json:"signature"`
	DataHash  []byte `json:"datahash"`
	AES       []byte `json:"aesiv"`
}

func (s *smtpServer) Address() string {
	return s.host + ":" + s.port
}

func join(strs ...string) string {
	var sb strings.Builder
	for _, str := range strs {
		sb.WriteString(str)
	}
	return sb.String()
}

func main() {

	router := gin.Default()

	//This generate a keystore file which is stored along with your Guer profile.
	//The purpose of this keystore is to encrypt and decrypt files.
	//*** A user may also import their own keystore file, but this function allows for a much easier user experience for now. ***//
	//*** Eventually, the users wallet (metamask, etc) will serve as the keystore so this function will be unnecessary.
	router.POST("/api/keystore", func(c *gin.Context) {

		keystorePass := c.PostForm("encryptpass")

		ks := keystore.NewKeyStore("./tmp", keystore.StandardScryptN, keystore.StandardScryptP)
		account, err := ks.NewAccount(keystorePass)
		log.Print(account)
		if err != nil {
			log.Print(err)
		}

		dir := "./tmp/"
		files, _ := ioutil.ReadDir(dir)
		var newestFile string
		var newestTime int64 = 0
		for _, f := range files {
			fi, err := os.Stat(dir + f.Name())
			if err != nil {
				fmt.Println(err)
			}
			currTime := fi.ModTime().Unix()
			if currTime > newestTime {
				newestTime = currTime
				newestFile = f.Name()
			}
		}

		filelocation := "./tmp/" + string(newestFile)
		file, err := os.Open(filelocation)
		dat, err := ioutil.ReadAll(file)
		fmt.Print(bytes.NewReader(dat))

		sh := shell.NewShell("https://ipfs.infura.io:5001")
		cid, err := sh.Add(bytes.NewReader(dat))
		if err != nil {
			fmt.Fprintf(os.Stderr, "error: %s", err)
			os.Exit(1)
		}
		c.JSON(http.StatusOK, cid)

	})

	//Encrypting a file
	router.POST("/api/encrypt", func(c *gin.Context) {

		keystorePass := c.PostForm("encryptpass")

		encryptedPath := "./tmp/myfile.data"
		file, _, err := c.Request.FormFile("file")
		defer file.Close()
		if err != nil {
			log.Print(err)
		}

		buf := bytes.NewBuffer(nil)
		buf.ReadFrom(file)

		keystorePath := c.PostForm("keystorefile")
		finalurl := join("https://cloudflare-ipfs.com/ipfs/", keystorePath)

		resp, _ := http.Get(finalurl)

		keystorebody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Println(err)
		}

		//generate aes key from rand
		aesiv := make([]byte, 32)
		_, err = rand.Read(aesiv)
		if err != nil {
			log.Print(err)
			return
		}
		ec, err := aes.NewCipher(aesiv)
		if err != nil {
			log.Print(err)
		}

		gcm, err := cipher.NewGCM(ec)
		if err != nil {
			log.Print(err)
		}

		nonce := make([]byte, gcm.NonceSize())
		if _, err = io.ReadFull(rand.Reader, nonce); err != nil {
			log.Print(err)
		}

		//encrypt file using aes key and write to file
		err = ioutil.WriteFile(encryptedPath, gcm.Seal(nonce, nonce, buf.Bytes(), nil), 0777)
		if err != nil {
			log.Print(err)
		}

		//myfile, err := os.Open(encryptedPath)
		//filedat, err := ioutil.ReadAll(myfile)

		sh := shell.NewShell("https://ipfs.infura.io:5001")
		cid, err := sh.Add(bytes.NewReader(gcm.Seal(nonce, nonce, buf.Bytes(), nil)))
		if err != nil {
			fmt.Fprintf(os.Stderr, "error: %s", err)
			os.Exit(1)
		}

		fmt.Print("a")

		//decrypts key from keystore for use in application
		key, err := keystore.DecryptKey(keystorebody, keystorePass)
		if err != nil {
			log.Print(err)
		}

		//write to file pubKey from imported keystore
		pubkey := crypto.FromECDSAPub(&key.PrivateKey.PublicKey)
		if err != nil {
			log.Print(err)
		}

		//read encrypted file for HMAC hash
		data, err := ioutil.ReadFile(encryptedPath)
		if err != nil {
			log.Print("error: read encrypted file", err)
		}

		//hash encrypted file
		dataHash := crypto.Keccak256Hash(data)
		if err != nil {
			log.Print("error: write data hash", err)
		}

		//sign hmac
		signature, err := crypto.Sign(dataHash.Bytes(), key.PrivateKey)
		if err != nil {
			log.Print(err)
		}

		companion := Companion{
			PubKey:    []byte(pubkey[:]),
			Signature: []byte(signature[:]),
			DataHash:  []byte(dataHash.Bytes()),
			AES:       []byte(aesiv[:])}

		jsonCompanion, err := json.Marshal(companion)
		if err != nil {
			log.Print(err)
		}
		fmt.Printf(string(jsonCompanion))

		eciesPubkey := ecies.ImportECDSAPublic(&key.PrivateKey.PublicKey)

		eciesData, err := ecies.Encrypt(rand.Reader, eciesPubkey, []byte(jsonCompanion), nil, nil)
		if err != nil {
			log.Print(err)
		}

		ioutil.WriteFile("./tmp/companion.json", eciesData, 0644)

		companionlocation := "./tmp/companion.json"
		mycompanion, err := os.Open(companionlocation)
		companiondat, err := ioutil.ReadAll(mycompanion)

		csh := shell.NewShell("https://ipfs.infura.io:5001")
		ccid, err := csh.Add(bytes.NewReader(companiondat))
		if err != nil {
			fmt.Fprintf(os.Stderr, "error: %s", err)
			os.Exit(1)
		}
		fmt.Println(cid)
		fmt.Println(ccid)
		c.JSON(http.StatusOK, gin.H{"file": cid, "companion": ccid})

	})

	//Decrypting a file
	router.POST("/api/decrypt", func(c *gin.Context) {

		plaintextWriteName := "./tmp/unencryptedfile.png"
		keystorePath := c.PostForm("keystorefile")
		companionPath := c.PostForm("companionfile")
		keystorePass := c.PostForm("encryptpass")
		filePath := c.PostForm("encryptedfile")
		keystoreurl := join("https://cloudflare-ipfs.com/ipfs/", keystorePath)
		ciphertexturl := join("https://cloudflare-ipfs.com/ipfs/", filePath)
		companionurl := join("https://cloudflare-ipfs.com/ipfs/", companionPath)
		fmt.Print(keystoreurl)
		fmt.Print(ciphertexturl)
		fmt.Print(companionurl)

		keystoreresp, _ := http.Get(keystoreurl)

		keystorebody, err := ioutil.ReadAll(keystoreresp.Body)
		if err != nil {
			log.Println("1", err)
		}

		ciphertextresp, _ := http.Get(ciphertexturl)

		ciphertextbody, err := ioutil.ReadAll(ciphertextresp.Body)
		if err != nil {
			log.Println("2", err)
		}

		companionresp, _ := http.Get(companionurl)

		companionbody, err := ioutil.ReadAll(companionresp.Body)
		if err != nil {
			log.Println("3", err)
		}

		//decrypts key from keystore for use in application
		key, err := keystore.DecryptKey(keystorebody, keystorePass)
		if err != nil {
			log.Print("4", err)
		}

		eciesKey := ecies.ImportECDSA(key.PrivateKey)

		jsonCompanion, err := eciesKey.Decrypt(companionbody, nil, nil)
		if err != nil {
			log.Print("5", err)
		}

		var companion Companion

		json.Unmarshal(jsonCompanion, &companion)

		//generate hash from encrypted file for sig verification
		dataHashDecrypt := crypto.Keccak256Hash(ciphertextbody)
		if err != nil {
			log.Print("error: write data hash", err)
		}

		//verify signature of file you're trying to decrypt
		sigNoRecoverID := companion.Signature[:len(companion.Signature)-1]
		fmt.Println(companion.PubKey)
		fmt.Println(dataHashDecrypt)
		fmt.Println(sigNoRecoverID)

		//Decrypt file
		aeskey := []byte(companion.AES)

		dc, err := aes.NewCipher(aeskey)
		if err != nil {
			fmt.Println(err)
		}

		gcm, err := cipher.NewGCM(dc)
		if err != nil {
			fmt.Println(err)
		}

		nonceSize := gcm.NonceSize()
		if len(ciphertextbody) < nonceSize {
			fmt.Println(err)
		}

		nonce, ciphertext := ciphertextbody[:nonceSize], ciphertextbody[nonceSize:]
		plaintext, err := gcm.Open(nil, nonce, ciphertext, nil)
		if err != nil {
			fmt.Println(err)
		}

		ioutil.WriteFile(plaintextWriteName, plaintext, 0664)

		c.JSON(http.StatusOK, plaintext)
	})

	//IPFS Upload
	router.POST("/api/ipfs", func(c *gin.Context) {
		file, header, err := c.Request.FormFile("file")
		fmt.Println(header)
		sh := shell.NewShell("https://ipfs.infura.io:5001")
		cid, err := sh.Add(file)
		if err != nil {
			fmt.Fprintf(os.Stderr, "error: %s", err)
			os.Exit(1)
		}
		c.JSON(http.StatusOK, cid)
	})

	//Run go server
	router.Run(":8080")

}
